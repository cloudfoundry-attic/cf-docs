---
title: Provider Documentation
---

## <a id='integration'></a>Integrating With Cloud Foundry ##

Cloud Foundry has partnered with AppDirect for services integration with our public PaaS at [run.pivotal.io](https://run.pivotal.io). Service providers interested in adding their service to the Pivotal CF Marketplace should contact [Nima Badiey](mailto:nbadiey@gopivotal.com) for more information. 

Documentation on AppDirect's API for Cloud Foundry can be found here:
http://info.appdirect.com/developer/docs/cloud-foundry/

## <a id='google-group'></a>Google Group ##

Join our Google Group to receive announcements regarding integration with Cloud Foundry.
https://groups.google.com/forum/?hl=en&fromgroups#!forum/cloud-foundry-partners

## <a id='docs'></a>Documentation ##

Service providers should feel enabled to manage their own documentation. Clone the [cf-docs repo](https://github.com/cloudfoundry/cf-docs) and issue pull requests to update your Marketplace Services documentation page. 

Your documentation page should reside in `source/docs/dotcom/services-marketplace`.

There is a template available to get you started. Please include the Managing Services and Support sections with links included; feel free to add additional information as appropriate. If your service is bindable, you should include the section on Environment Variables. 

[Provider Documentation Template](provider-template.html)

## <a id='sample-apps'></a>Sample Apps ##

Providing a sample application that works out of the box provides an excellent user experience. Developers can validate that your service works as expected, and the sample app should provide a code example for how to integrate an application with your service. There are two ways we recommend publishing your sample application:

1. You can host your sample app in your own repo, and we can fork it into https://github.com/cloudfoundry-samples
2. You can send us the code for your app and we can add a new repo to https://github.com/cloudfoundry-samples

## <a id='binding-credentials'></a>Binding Credentials ##

If your service is bindable, it means that in response to the bind API call, you will return credentials which can be consumed by an application. We write these credentials to the environment variable [VCAP_SERVICES](../../../using/services/environment-variable.html). In some cases buildpacks will write a subset of these credentials to other environment variables that frameworks may expect. 

Please choose from the following list of credential fields if possible. You can provide additional fields as needed, but if any of these meet your needs you should use them. This convention allows us to provide end user developers with libraries which parse VCAP_SERVICES and deliver useful objects to applications, and other libraries which actually configure applications themselves with a service connection.  

**Important: if you provide a service which supports a connection string, you must provide at least the `uri` key; as mentioned you may provide discrete credential fields in addition. The aforementioned libraries use the `uri` key.** 

| credentials   | description |
|---------------|-------------|
| uri           | Connection string of the form `dbtype://username:password@hostname:port/name`, where `dbtype` is mysql, postgres, mongodb, amqp, etc. |
| hostname      | The FQDN of the server host |
| port          | The port of the server host |
| name          | Name of the service instance; database name |
| vhost         | Name of the messaging server virtual host (replacement for `name` specific to AMQP providers) |
| username      | Server user |
| password      | Server password |

Here's an example output of `ENV['VCAP_SERVICES']`. Note that ClearDB chooses to return both discrete credentials, a uri, as well as another field. CloudAMQP chooses to return just the uri, and RedisCloud returns only discrete credentials.

~~~
VCAP_SERVICES=
{
  cleardb-dev-n/a: [
    {
      name: "cleardb-dev-1",
      label: "cleardb-dev-n/a",
      plan: "spark",
      credentials: {
        name: "ad_c6f4446532610ab",
        hostname: "us-cdbr-east-03.cleardb.com",
        port: "3306",
        username: "b5d435f40dd2b2",
        password: "ebfc00ac",
        uri: "mysql://b5d435f40dd2b2:ebfc00ac@us-cdbr-east-03.cleardb.com:3306/ad_c6f4446532610ab",
        jdbcUrl: "jdbc:mysql://b5d435f40dd2b2:ebfc00ac@us-cdbr-east-03.cleardb.com:3306/ad_c6f4446532610ab"
      }
    }
  ],
  cloudamqp-dev-n/a: [
    {
      name: "cloudamqp-dev-6",
      label: "cloudamqp-dev-n/a",
      plan: "lemur",
      credentials: {
        uri: "amqp://ksvyjmiv:IwN6dCdZmeQD4O0ZPKpu1YOaLx1he8wo@lemur.cloudamqp.com/ksvyjmiv"
      }
    }
    {
      name: "cloudamqp-dev-9dbc6",
      label: "cloudamqp-dev-n/a",
      plan: "lemur",
      credentials: {
        uri: "amqp://vhuklnxa:9lNFxpTuJsAdTts98vQIdKHW3MojyMyV@lemur.cloudamqp.com/vhuklnxa"
      }
    }
  ],
  rediscloud-dev-n/a: [
    {
      name: "rediscloud-dev-1",
      label: "rediscloud-dev-n/a",
      plan: "20mb",
      credentials: {
        port: "17546",
        host: "pub-redis-17546.MatanCluster.ec2.garantiadata.com",
        password: "1M5zd3QfWi9nUyya"
      }
    },
  ],
}
~~~
